// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.174.0
//   protoc               v5.26.1
// source: src/proto/product.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { wrappers } from "protobufjs";
import { Observable } from "rxjs";

export const protobufPackage = "product";

export interface ProductResponseMessage {
  code: number;
  message?: string | undefined;
  product?: Product | undefined;
}

export interface ProductsResponseMessage {
  code: number;
  message?: string | undefined;
  products: Product[];
}

export interface FindProductByIdDto {
  id: string;
}

export interface SearchProductDto {
  name?: string | undefined;
  category?: string | undefined;
  make?: string | undefined;
  description?: string | undefined;
  minPrice?: number | undefined;
  maxPrice?: number | undefined;
  quantity?: number | undefined;
}

export interface CreateProductDto {
  name: string;
  category?: string | undefined;
  make: string;
  description?: string | undefined;
  price: number;
  quantity: number;
}

export interface UpdateProductDto {
  id: string;
  name?: string | undefined;
  category?: string | undefined;
  make?: string | undefined;
  description?: string | undefined;
  price?: number | undefined;
  quantity?: number | undefined;
}

export interface OrderRequestDto {
  productId: string;
  quantity: number;
}

export interface Product {
  id: string;
  name: string;
  category?: string | undefined;
  make: string;
  description?: string | undefined;
  price: number;
  quantity: number;
  createdAt: Date | undefined;
  deletedAt?: Date | undefined;
  updatedAt: Date | undefined;
}

export interface Products {
  products: Product[];
}

export const PRODUCT_PACKAGE_NAME = "product";

wrappers[".google.protobuf.Timestamp"] = {
  fromObject(value: Date) {
    return { seconds: value.getTime() / 1000, nanos: (value.getTime() % 1000) * 1e6 };
  },
  toObject(message: { seconds: number; nanos: number }) {
    return new Date(message.seconds * 1000 + message.nanos / 1e6);
  },
} as any;

export interface ProductServiceClient {
  searchProduct(request: SearchProductDto): Observable<ProductsResponseMessage>;

  findProductById(request: FindProductByIdDto): Observable<ProductResponseMessage>;

  createProduct(request: CreateProductDto): Observable<ProductResponseMessage>;

  updateProduct(request: UpdateProductDto): Observable<ProductResponseMessage>;

  orderRequest(request: OrderRequestDto): Observable<ProductResponseMessage>;

  removeProduct(request: FindProductByIdDto): Observable<ProductResponseMessage>;
}

export interface ProductServiceController {
  searchProduct(
    request: SearchProductDto,
  ): Promise<ProductsResponseMessage> | Observable<ProductsResponseMessage> | ProductsResponseMessage;

  findProductById(
    request: FindProductByIdDto,
  ): Promise<ProductResponseMessage> | Observable<ProductResponseMessage> | ProductResponseMessage;

  createProduct(
    request: CreateProductDto,
  ): Promise<ProductResponseMessage> | Observable<ProductResponseMessage> | ProductResponseMessage;

  updateProduct(
    request: UpdateProductDto,
  ): Promise<ProductResponseMessage> | Observable<ProductResponseMessage> | ProductResponseMessage;

  orderRequest(
    request: OrderRequestDto,
  ): Promise<ProductResponseMessage> | Observable<ProductResponseMessage> | ProductResponseMessage;

  removeProduct(
    request: FindProductByIdDto,
  ): Promise<ProductResponseMessage> | Observable<ProductResponseMessage> | ProductResponseMessage;
}

export function ProductServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "searchProduct",
      "findProductById",
      "createProduct",
      "updateProduct",
      "orderRequest",
      "removeProduct",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ProductService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ProductService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const PRODUCT_SERVICE_NAME = "ProductService";
